{"cells":[{"cell_type":"markdown","source":["## Overview\n\nThis notebook will show you how to create and query a table or DataFrame that you uploaded to DBFS. [DBFS](https://docs.databricks.com/user-guide/dbfs-databricks-file-system.html) is a Databricks File System that allows you to store data for querying inside of Databricks. This notebook assumes that you have a file already inside of DBFS that you would like to read from.\n\nThis notebook is written in **Python** so the default cell type is Python. However, you can use different languages by using the `%LANGUAGE` syntax. Python, Scala, SQL, and R are all supported."],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"96816ed7-b08a-4ca3-abb9-f99880c3535d"}}},{"cell_type":"code","source":["%python\n# File location and type\nfile_location = \"/FileStore/tables/hw5_employee.json\"\nfile_type = \"json\"\n\n# CSV options\ninfer_schema = \"false\"\nfirst_row_is_header = \"false\"\ndelimiter = \",\"\n\n# The applied options are for CSV files. For other file types, these will be ignored.\ndf = spark.read.format(file_type) \\\n  .option(\"inferSchema\", infer_schema) \\\n  .option(\"header\", first_row_is_header) \\\n  .option(\"sep\", delimiter) \\\n  .load(file_location)\n\ndisplay(df)"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"6482be4c-f067-47c9-b0ac-35c938b94601"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"overflow":false,"datasetInfos":[],"data":[["5342 Picklied Trout Lane",null,"Nashville","2000-02-22","000-00-000","Laura Ellenburg","TN","454-56-768","38010"],["2134 Hilltop Rd","1957-01-05","Knoxville","1999-06-12","123-44-345","Phil Morris","TN","454-56-768","37920"],["5970 Spring Crest Rd","1963-08-15","Nashville","1999-01-05","334-45-667","Lawrence Haley","TN","454-56-768","54545"],["17834 Deerfield Ln","1964-08-25","Knoxville","1998-01-01","454-56-768","Robert Lewis","TN","123-44-345","55555"],["75 Jane Lane","1969-05-06","Clearwater","2000-08-15","559-55-585","Mary Smith","FL","334-45-667","33879"]],"plotOptions":{"displayType":"table","customPlotOptions":{},"pivotColumns":null,"pivotAggregation":null,"xColumns":null,"yColumns":null},"columnCustomDisplayInfos":{},"aggType":"","isJsonSchema":true,"removedWidgets":[],"aggSchema":[],"schema":[{"name":"employeeAddress","type":"\"string\"","metadata":"{}"},{"name":"employeeBirthDate","type":"\"string\"","metadata":"{}"},{"name":"employeeCity","type":"\"string\"","metadata":"{}"},{"name":"employeeDateHired","type":"\"string\"","metadata":"{}"},{"name":"employeeID","type":"\"string\"","metadata":"{}"},{"name":"employeeName","type":"\"string\"","metadata":"{}"},{"name":"employeeState","type":"\"string\"","metadata":"{}"},{"name":"employeeSupervisor","type":"\"string\"","metadata":"{}"},{"name":"employeeZipCode","type":"\"string\"","metadata":"{}"}],"aggError":"","aggData":[],"addedWidgets":{},"metadata":{},"dbfsResultPath":null,"type":"table","aggOverflow":false,"aggSeriesLimitReached":false,"arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .table-result-container {\n    max-height: 300px;\n    overflow: auto;\n  }\n  table, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n  }\n  th, td {\n    padding: 5px;\n  }\n  th {\n    text-align: left;\n  }\n</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>employeeAddress</th><th>employeeBirthDate</th><th>employeeCity</th><th>employeeDateHired</th><th>employeeID</th><th>employeeName</th><th>employeeState</th><th>employeeSupervisor</th><th>employeeZipCode</th></tr></thead><tbody><tr><td>5342 Picklied Trout Lane</td><td>null</td><td>Nashville</td><td>2000-02-22</td><td>000-00-000</td><td>Laura Ellenburg</td><td>TN</td><td>454-56-768</td><td>38010</td></tr><tr><td>2134 Hilltop Rd</td><td>1957-01-05</td><td>Knoxville</td><td>1999-06-12</td><td>123-44-345</td><td>Phil Morris</td><td>TN</td><td>454-56-768</td><td>37920</td></tr><tr><td>5970 Spring Crest Rd</td><td>1963-08-15</td><td>Nashville</td><td>1999-01-05</td><td>334-45-667</td><td>Lawrence Haley</td><td>TN</td><td>454-56-768</td><td>54545</td></tr><tr><td>17834 Deerfield Ln</td><td>1964-08-25</td><td>Knoxville</td><td>1998-01-01</td><td>454-56-768</td><td>Robert Lewis</td><td>TN</td><td>123-44-345</td><td>55555</td></tr><tr><td>75 Jane Lane</td><td>1969-05-06</td><td>Clearwater</td><td>2000-08-15</td><td>559-55-585</td><td>Mary Smith</td><td>FL</td><td>334-45-667</td><td>33879</td></tr></tbody></table></div>"]}}],"execution_count":0},{"cell_type":"code","source":["%sql\n\n/* Query the created temp table in a SQL cell */\n\n/* 1 What are the employee name and the supervisor's name of each employee? */\n\nselect distinct  d.employeename,c.employeename AS Supervisor_Name\nfrom `hw5_employee_json` AS c, `hw5_employee_copy_json` AS d\nwhere c.employeeID = d.employeeSupervisor"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"b5f66379-6f7f-42ec-8e82-d0e0926a1721"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"overflow":false,"datasetInfos":[],"data":[["Lawrence Haley","Robert Lewis"],["Phil Morris","Robert Lewis"],["Robert Lewis","Phil Morris"],["Mary Smith","Lawrence Haley"],["Laura Ellenburg","Robert Lewis"]],"plotOptions":{"displayType":"table","customPlotOptions":{"plotlyBar":[{"key":"grouped","value":true},{"key":"stacked","value":false},{"key":"100_stacked","value":false}]},"pivotColumns":[],"pivotAggregation":"count","xColumns":["employeename","Supervisor_Name"],"yColumns":[]},"columnCustomDisplayInfos":{},"aggType":"","isJsonSchema":true,"removedWidgets":[],"aggSchema":[],"schema":[{"name":"employeename","type":"\"string\"","metadata":"{}"},{"name":"Supervisor_Name","type":"\"string\"","metadata":"{}"}],"aggError":"","aggData":[],"addedWidgets":{},"metadata":{"isDbfsCommandResult":false},"dbfsResultPath":null,"type":"table","aggOverflow":false,"aggSeriesLimitReached":false,"arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .table-result-container {\n    max-height: 300px;\n    overflow: auto;\n  }\n  table, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n  }\n  th, td {\n    padding: 5px;\n  }\n  th {\n    text-align: left;\n  }\n</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>employeename</th><th>Supervisor_Name</th></tr></thead><tbody><tr><td>Lawrence Haley</td><td>Robert Lewis</td></tr><tr><td>Phil Morris</td><td>Robert Lewis</td></tr><tr><td>Robert Lewis</td><td>Phil Morris</td></tr><tr><td>Mary Smith</td><td>Lawrence Haley</td></tr><tr><td>Laura Ellenburg</td><td>Robert Lewis</td></tr></tbody></table></div>"]}}],"execution_count":0},{"cell_type":"code","source":["%python\n#!pip install --upgrade pip\n\n# 1. What are the employee name and the supervisor's name of each employee? \n\n#!pip install -q findspark\n#import findspark\n\n#import pyspark\n#from pyspark.sql import SparkSession \n\n\ndf = spark.read.table('default.hw5_employee_json').withColumnRenamed('employeeName','Supervisor_Name')\n#df.show()\n\ndf1 = spark.read.table('default.hw5_employee_copy_json')\n#df1.show()\n\ny=df.join(df1,df.employeeID==df1.employeeSupervisor)\n#y.show()\n\ny.select(y.employeeName,y.Supervisor_Name).show()\n\n"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"db9b14a8-3c03-4337-93b7-c384618f9997"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"+---------------+---------------+\n|   employeeName|Supervisor_Name|\n+---------------+---------------+\n|   Robert Lewis|    Phil Morris|\n|     Mary Smith| Lawrence Haley|\n| Lawrence Haley|   Robert Lewis|\n|    Phil Morris|   Robert Lewis|\n|Laura Ellenburg|   Robert Lewis|\n+---------------+---------------+\n\n","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"ansi","arguments":{}}},"output_type":"display_data","data":{"text/plain":["+---------------+---------------+\n|   employeeName|Supervisor_Name|\n+---------------+---------------+\n|   Robert Lewis|    Phil Morris|\n|     Mary Smith| Lawrence Haley|\n| Lawrence Haley|   Robert Lewis|\n|    Phil Morris|   Robert Lewis|\n|Laura Ellenburg|   Robert Lewis|\n+---------------+---------------+\n\n"]}}],"execution_count":0},{"cell_type":"code","source":["%sql\n\n/* Query the created temp table in a SQL cell */\n\n/*2. What are the employee name and age when each employee was hired? */\n\nSELECT m.employeeName,  IF (m.employeeBirthDate IS NULL ,'No information', DATEDIFF (YEAR,m.employeeBirthDate, m.employeeDateHired)) AS Employee_Hire_Age\nFROM hw5_employee_json m\nORDER BY m.employeeName\n\n"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"c90ed52f-4137-4a58-b4b0-104749ff826a"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"overflow":false,"datasetInfos":[],"data":[["Laura Ellenburg","No information"],["Lawrence Haley","35"],["Mary Smith","31"],["Phil Morris","42"],["Robert Lewis","33"]],"plotOptions":{"displayType":"plotlyBar","customPlotOptions":{"histogram":[{"key":"bins","value":"20"}],"areaChart":[{"key":"grouped","value":true},{"key":"stacked","value":false},{"key":"100_stacked","value":false}],"plotlyBar":[{"key":"grouped","value":true},{"key":"stacked","value":false},{"key":"100_stacked","value":false}],"qqPlot":[],"plotlyLine":[{"key":"yRange","value":""},{"key":"showPoints","value":false},{"key":"logScale","value":false}],"quantilePlot":[]},"pivotColumns":["employeeName"],"pivotAggregation":"sum","xColumns":[],"yColumns":["Employee_Hire_Age"]},"columnCustomDisplayInfos":{},"aggType":"","isJsonSchema":true,"removedWidgets":[],"aggSchema":[],"schema":[{"name":"employeeName","type":"\"string\"","metadata":"{}"},{"name":"Employee_Hire_Age","type":"\"string\"","metadata":"{}"}],"aggError":"","aggData":[],"addedWidgets":{},"metadata":{"isDbfsCommandResult":false},"dbfsResultPath":null,"type":"table","aggOverflow":false,"aggSeriesLimitReached":false,"arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .table-result-container {\n    max-height: 300px;\n    overflow: auto;\n  }\n  table, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n  }\n  th, td {\n    padding: 5px;\n  }\n  th {\n    text-align: left;\n  }\n</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>employeeName</th><th>Employee_Hire_Age</th></tr></thead><tbody><tr><td>Laura Ellenburg</td><td>No information</td></tr><tr><td>Lawrence Haley</td><td>35</td></tr><tr><td>Mary Smith</td><td>31</td></tr><tr><td>Phil Morris</td><td>42</td></tr><tr><td>Robert Lewis</td><td>33</td></tr></tbody></table></div>"]}}],"execution_count":0},{"cell_type":"code","source":["%python\nfrom pyspark.sql.functions import *\n# 2.What are the employee name and age when each employee was hired? \n\nh = df.select((\"employeeName\"),when(isnull(df.employeeBirthDate),\\\n                                           \"No Information\").otherwise(floor(months_between(\"employeeDateHired\",\"employeeBirthDate\")/12))\\\n                     .alias(\"Employee Hire Age\")).orderBy(df.employeeName.asc()).show()"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"077d9561-9b00-4138-8adb-5d032e2a9a04"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"+---------------+-----------------+\n|   employeeName|Employee Hire Age|\n+---------------+-----------------+\n|Laura Ellenburg|   No Information|\n| Lawrence Haley|               35|\n|     Mary Smith|               31|\n|    Phil Morris|               42|\n|   Robert Lewis|               33|\n+---------------+-----------------+\n\n","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"ansi","arguments":{}}},"output_type":"display_data","data":{"text/plain":["+---------------+-----------------+\n|   employeeName|Employee Hire Age|\n+---------------+-----------------+\n|Laura Ellenburg|   No Information|\n| Lawrence Haley|               35|\n|     Mary Smith|               31|\n|    Phil Morris|               42|\n|   Robert Lewis|               33|\n+---------------+-----------------+\n\n"]}}],"execution_count":0},{"cell_type":"code","source":["%sql\n\n/* Query the created temp table in a SQL cell */\n\n/*3. How many employees in each city */\n\nselect l.employeeCity, COUNT( distinct l.employeeID) AS Number_of_Employees\nfrom `hw5_employee_json` AS l\nGroup by l.employeeCity"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"c1100216-bcae-4d85-b7c2-a7d2a78e331f"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"overflow":false,"datasetInfos":[],"data":[["Nashville",2],["Knoxville",2],["Clearwater",1]],"plotOptions":{"displayType":"plotlyBar","customPlotOptions":{"plotlyBar":[{"key":"grouped","value":true},{"key":"stacked","value":false},{"key":"100_stacked","value":false}]},"pivotColumns":["employeeCity"],"pivotAggregation":"sum","xColumns":[],"yColumns":["Number_of_Employees"]},"columnCustomDisplayInfos":{},"aggType":"","isJsonSchema":true,"removedWidgets":[],"aggSchema":[],"schema":[{"name":"employeeCity","type":"\"string\"","metadata":"{}"},{"name":"Number_of_Employees","type":"\"long\"","metadata":"{}"}],"aggError":"","aggData":[],"addedWidgets":{},"metadata":{"isDbfsCommandResult":false},"dbfsResultPath":null,"type":"table","aggOverflow":false,"aggSeriesLimitReached":false,"arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .table-result-container {\n    max-height: 300px;\n    overflow: auto;\n  }\n  table, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n  }\n  th, td {\n    padding: 5px;\n  }\n  th {\n    text-align: left;\n  }\n</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>employeeCity</th><th>Number_of_Employees</th></tr></thead><tbody><tr><td>Nashville</td><td>2</td></tr><tr><td>Knoxville</td><td>2</td></tr><tr><td>Clearwater</td><td>1</td></tr></tbody></table></div>"]}}],"execution_count":0},{"cell_type":"code","source":["%python\n\n# 3.How many employees in each city \nli=[\"Nashville\",\"Knoxville\",\"Clearwater\"]\nb=df.filter(df.employeeCity.isin(li)).select('employeeID','employeeCity') \np=b.groupBy(\"employeeCity\").count()\nik=p.sort('count', ascending=False)\nik.withColumnRenamed(\"count\",\"Number of employees\").show()"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"82adb1e1-c475-43e9-9f6a-84c6881ab909"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"+------------+-------------------+\n|employeeCity|Number of employees|\n+------------+-------------------+\n|   Knoxville|                  2|\n|   Nashville|                  2|\n|  Clearwater|                  1|\n+------------+-------------------+\n\n","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"ansi","arguments":{}}},"output_type":"display_data","data":{"text/plain":["+------------+-------------------+\n|employeeCity|Number of employees|\n+------------+-------------------+\n|   Knoxville|                  2|\n|   Nashville|                  2|\n|  Clearwater|                  1|\n+------------+-------------------+\n\n"]}}],"execution_count":0},{"cell_type":"code","source":["%sql\n\n/* Query the created temp table in a SQL cell */\n\n/* 4.How many skills applied by each employee? */\n\n\nselect d.employeeID, COUNT(p.skillID) AS Number_of_Skills\nfrom `hw5_employeeskill_json` AS p, `hw5_employee_json` AS d\nwhere d.employeeID=p.employeeID\nGroup by d.employeeID"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"bb54773a-b44a-4b4e-85a9-5d32a942f8ef"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"overflow":false,"datasetInfos":[],"data":[["123-44-345",4],["334-45-667",2],["454-56-768",3],["000-00-000",3]],"plotOptions":{"displayType":"plotlyBar","customPlotOptions":{"plotlyBar":[{"key":"grouped","value":true},{"key":"stacked","value":false},{"key":"100_stacked","value":false}]},"pivotColumns":["employeeID"],"pivotAggregation":"sum","xColumns":[],"yColumns":["Number_of_Skills"]},"columnCustomDisplayInfos":{},"aggType":"","isJsonSchema":true,"removedWidgets":[],"aggSchema":[],"schema":[{"name":"employeeID","type":"\"string\"","metadata":"{}"},{"name":"Number_of_Skills","type":"\"long\"","metadata":"{}"}],"aggError":"","aggData":[],"addedWidgets":{},"metadata":{"isDbfsCommandResult":false},"dbfsResultPath":null,"type":"table","aggOverflow":false,"aggSeriesLimitReached":false,"arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .table-result-container {\n    max-height: 300px;\n    overflow: auto;\n  }\n  table, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n  }\n  th, td {\n    padding: 5px;\n  }\n  th {\n    text-align: left;\n  }\n</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>employeeID</th><th>Number_of_Skills</th></tr></thead><tbody><tr><td>123-44-345</td><td>4</td></tr><tr><td>334-45-667</td><td>2</td></tr><tr><td>454-56-768</td><td>3</td></tr><tr><td>000-00-000</td><td>3</td></tr></tbody></table></div>"]}}],"execution_count":0},{"cell_type":"code","source":["%python\n\n\ndf5 = spark.read.table('default.hw5_employeeskill_json')\n\n\n#4. How many skills applied by each employee?\ndf5.groupBy('employeeID').agg(count('skillID').alias(\"Number_of_Skills\")).show()"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"7cbfde3f-5580-406d-8309-88c005e50eff"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"+----------+----------------+\n|employeeID|Number_of_Skills|\n+----------+----------------+\n|123-44-345|               4|\n|334-45-667|               2|\n|454-56-768|               3|\n|000-00-000|               3|\n+----------+----------------+\n\n","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"ansi","arguments":{}}},"output_type":"display_data","data":{"text/plain":["+----------+----------------+\n|employeeID|Number_of_Skills|\n+----------+----------------+\n|123-44-345|               4|\n|334-45-667|               2|\n|454-56-768|               3|\n|000-00-000|               3|\n+----------+----------------+\n\n"]}}],"execution_count":0},{"cell_type":"code","source":["%sql\n\n/* Query the created temp table in a SQL cell */\n\n/* 5.How many employees apply each skill at each work center? */\n\n\n\nselect COUNT(distinct p.employeeID) AS Number_of_Employees,h.skillID,v.workCenterLocation\nfrom `hw5_employeeskill_json` AS p,`hw5_employeeworkcenter_json` AS o,`hw5_workcenter_json` AS v,`hw5_skill_json` AS h\nwhere  p.employeeID=o.employeeID\nAND h.skillID=p.skillID\nAND o.workCenterID=v.workCenterID\nGroup by v.workCenterLocation,h.skillID\n\n"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"4929169d-faf1-47e4-b04c-293b3322bc25"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"overflow":false,"datasetInfos":[],"data":[[1,"QC1","Main Saw Mill"],[1,"TS10","Tampa Warehouse"],[1,"BS12","Tampa Warehouse"],[1,"RT1","Tampa Warehouse"],[1,"TS10","Main Saw Mill"],[1,"RT1","Main Saw Mill"],[1,"BS12","Main Saw Mill"]],"plotOptions":{"displayType":"plotlyBar","customPlotOptions":{"plotlyBar":[{"key":"grouped","value":true},{"key":"stacked","value":false},{"key":"100_stacked","value":false}],"scatterPlot":[{"key":"loess","value":false},{"key":"bandwidth","value":0.3}],"plotlyLine":[{"key":"yRange","value":""},{"key":"showPoints","value":false},{"key":"logScale","value":false}],"histogram":[{"key":"bins","value":"20"}]},"pivotColumns":["skillID"],"pivotAggregation":"count","xColumns":["workCenterLocation"],"yColumns":["Number_of_Employees"]},"columnCustomDisplayInfos":{},"aggType":"","isJsonSchema":true,"removedWidgets":[],"aggSchema":[],"schema":[{"name":"Number_of_Employees","type":"\"long\"","metadata":"{}"},{"name":"skillID","type":"\"string\"","metadata":"{}"},{"name":"workCenterLocation","type":"\"string\"","metadata":"{}"}],"aggError":"","aggData":[],"addedWidgets":{},"metadata":{"isDbfsCommandResult":false},"dbfsResultPath":null,"type":"table","aggOverflow":false,"aggSeriesLimitReached":false,"arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .table-result-container {\n    max-height: 300px;\n    overflow: auto;\n  }\n  table, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n  }\n  th, td {\n    padding: 5px;\n  }\n  th {\n    text-align: left;\n  }\n</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>Number_of_Employees</th><th>skillID</th><th>workCenterLocation</th></tr></thead><tbody><tr><td>1</td><td>QC1</td><td>Main Saw Mill</td></tr><tr><td>1</td><td>TS10</td><td>Tampa Warehouse</td></tr><tr><td>1</td><td>BS12</td><td>Tampa Warehouse</td></tr><tr><td>1</td><td>RT1</td><td>Tampa Warehouse</td></tr><tr><td>1</td><td>TS10</td><td>Main Saw Mill</td></tr><tr><td>1</td><td>RT1</td><td>Main Saw Mill</td></tr><tr><td>1</td><td>BS12</td><td>Main Saw Mill</td></tr></tbody></table></div>"]}}],"execution_count":0},{"cell_type":"code","source":["%python\nfrom pyspark.sql import functions as F\n\n\n# 5. How many employees apply each skill at each work center? \n\ndf5 = spark.read.table('default.hw5_employeeskill_json')\n\ndf6 = spark.read.table('default.hw5_employeeworkcenter_json')\n\ndf7 = spark.read.table('default.hw5_workcenter_json')\n\ndf8= spark.read.table('default.hw5_skill_json')\n\n\nv=df5.join(df6,df5.employeeID==df6.employeeID).drop(df6.employeeID)\n#v.show()\n\nb=df5.join(df8,df5.skillID==df8.skillID,how=\"inner\").drop(df5.skillID)\n#b.show()\n\ng=df6.join(df7,df6.workCenterID==df7.workCenterID,\"inner\").drop(df7.workCenterID)\n#g.show()\n\ntable=g=b.join(g,b.employeeID==g.employeeID, \"inner\").drop(b.employeeID)\n#table.show()\n\ntable.select('skillID','workCenterLocation','employeeID').count()\nf=table.groupBy('workCenterLocation','skillID').agg(F.count('employeeID').alias(\"Number of employees\"))\nkl=f.withColumnRenamed(\"count\",\"Number of employees\").show(truncate=False)\n\n"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"51034620-7e7b-4534-bf9a-7d6c5ec477d1"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"+------------------+-------+-------------------+\n|workCenterLocation|skillID|Number of employees|\n+------------------+-------+-------------------+\n|Main Saw Mill     |QC1    |1                  |\n|Tampa Warehouse   |TS10   |1                  |\n|Tampa Warehouse   |BS12   |1                  |\n|Tampa Warehouse   |RT1    |1                  |\n|Main Saw Mill     |TS10   |1                  |\n|Main Saw Mill     |RT1    |1                  |\n|Main Saw Mill     |BS12   |1                  |\n+------------------+-------+-------------------+\n\n","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"ansi","arguments":{}}},"output_type":"display_data","data":{"text/plain":["+------------------+-------+-------------------+\n|workCenterLocation|skillID|Number of employees|\n+------------------+-------+-------------------+\n|Main Saw Mill     |QC1    |1                  |\n|Tampa Warehouse   |TS10   |1                  |\n|Tampa Warehouse   |BS12   |1                  |\n|Tampa Warehouse   |RT1    |1                  |\n|Main Saw Mill     |TS10   |1                  |\n|Main Saw Mill     |RT1    |1                  |\n|Main Saw Mill     |BS12   |1                  |\n+------------------+-------+-------------------+\n\n"]}}],"execution_count":0},{"cell_type":"code","source":["%python\n# With this registered as a temp view, it will only be available to this particular notebook. If you'd like other users to be able to query this table, you can also create a table from the DataFrame.\n# Once saved, this table will persist across cluster restarts as well as allow various users across different notebooks to query this data.\n# To do so, choose your table name and uncomment the bottom line.\n\npermanent_table_name = \"hw5_employee_json\"\n\n# df.write.format(\"parquet\").saveAsTable(permanent_table_name)"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"db9631f6-bb4a-42ca-8a3c-0d48af932331"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"data":"","errorSummary":"","metadata":{},"errorTraceType":null,"type":"ipynbError","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>"]}}],"execution_count":0}],"metadata":{"application/vnd.databricks.v1+notebook":{"notebookName":"HW5_Darkwa_Emma","dashboards":[],"notebookMetadata":{"pythonIndentUnit":4},"language":"python","widgets":{},"notebookOrigID":3675815545446382}},"nbformat":4,"nbformat_minor":0}
